/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/backgrounds/": {
    /**
     * Returns a list of all available backgrounds in the db. 
     * @description Returns a list of all available backgrounds in the db. If authenticated, also returns the list of backgrounds created by the user.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["backgroundSchemas"]["getBackgroundListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/backgrounds/{backgroundId}": {
    /**
     * Returns the details of the background corresponding to the given id. 
     * @description Returns the details of the background corresponding to the given id.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["backgroundSchemas"]["getBackgroundResponseSchema"];
          };
        };
      };
    };
  };
  "/api/backgrounds/random": {
    /**
     * Returns the details of a random background from the database. 
     * @description Returns the details of a random background from list of backgrounds available to the user in the database.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["backgroundSchemas"]["getBackgroundResponseSchema"];
          };
        };
      };
    };
  };
  "/api/classes/": {
    /**
     * Returns a list of all available classes in the db. 
     * @description Returns a list of all available classes in the db. If authenticated, also returns the classes created by the user.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/classes/random": {
    /**
     * Returns the details of a random class in the database. 
     * @description Returns the details of a random class from list of classes available to the user in the database.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassResponseSchema"];
          };
        };
      };
    };
  };
  "/api/classes/withvariants": {
    /**
     * Returns a list of all available combinations of classes and variants in the db. 
     * @description Returns a list of all available combinations of classes and variants in the db. If authenticated, also returns the classes created by the user.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/classes/{classId}": {
    /**
     * Returns the details of the class corresponding to the given id. 
     * @description Returns the details of the class corresponding to the given id.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassResponseSchema"];
          };
        };
      };
    };
  };
  "/api/npcs/": {
    /**
     * Creates a new random npc using the settings provided. 
     * @description Creates a new random npc using the settings provided.
     */
    post: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"];
          };
        };
      };
    };
  };
  "/api/npcs/four": {
    /**
     * [MS ONLY] Creates four new random npcs using the settings provided. 
     * @description Creates four new random npcs using the settings provided. Only accessible through monstershuffler.com
     */
    post: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["npcSchemas"]["createFourRandomNpcsResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/": {
    /**
     * Returns a list of all available races in the db. 
     * @description Returns a list of all available races in the db. If authenticated, also returns the races created by the user.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/withvariants": {
    /**
     * Returns a list of all available combinations of races and variants in the db. 
     * @description Returns a list of all available combinations of races and variants in the db. If authenticated, also returns the races created by the user.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/{raceId}": {
    /**
     * Returns the details of the race corresponding to the given id. 
     * @description Returns the details of the race corresponding to the given id.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/random": {
    /**
     * Returns the details of a random race from the database. 
     * @description Returns the details of a random race from list of races available to the user in the database.
     */
    get: {
      parameters: {
        header?: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceResponseSchema"];
          };
        };
      };
    };
  };
  "/api/users/login": {
    /**
     * Logs in a user and returns an access token. 
     * @description Logs in a user and returns an access token. Logged users can then receive their creations through other routes, and access other protected routes.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["userSchemas"]["loginSchema"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["userSchemas"]["loginResponseSchema"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    backgroundSchemas: {
      createBackgroundSchema: {
        object: {
          name: string;
          femaleName: string;
          workplace: string;
          armor?: ({
            AC: string;
            name: string;
            isAutomaticCalcDisabled?: boolean;
            cost?: string;
            /** @enum {string} */
            type?: "light" | "medium" | "heavy";
            maxDex?: string;
            minStr?: string;
            weight?: string;
            stealthDis?: boolean;
          }) | ({
            choice: {
              /** @enum {string} */
              type: "random";
              number?: number;
              /** @enum {string} */
              resultType: "object" | "nameId";
              /** @enum {string} */
              source: "objects" | "languages" | "skills";
              objectType?: number;
              filters?: ({
                  keyName: string;
                  keyValues: (string)[];
                })[];
              chosenAlready?: ({
                  id?: number;
                  value: string;
                  levelMin?: string;
                })[];
            };
          });
          alignmentModifiers?: [[number, number, number], [number, number, number]];
          subtypes?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          abilityScoresLimit?: number;
          savingThrows?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          skills?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"] | {
            choice: {
              /** @enum {string} */
              type: "list";
              number: number;
              list: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
              isRepeatable?: boolean;
            };
          };
          resistances?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          immunities?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          vulnerabilities?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          conditionImmunities?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          isBlind?: boolean;
          canSpeak?: boolean;
          telepathy?: string;
          languages?: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: ({
              tag: string;
              /** @enum {string} */
              actionType?: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
              subType?: string;
              source?: string;
              tags?: (string)[];
              priority?: number;
              variants: (({
                  name: string;
                  description: string;
                  type: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["actions"]["items"]["actionType"];
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability?: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  values?: ({
                      name: string;
                      type?: string;
                      expression: string;
                    } | {
                      name: string;
                      type?: string;
                      expression?: string;
                      dice: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type?: string;
                      incrProgression: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        reach?: string;
                        targets?: string;
                        name?: string;
                        cost?: string;
                        weight?: string;
                        damageType?: string;
                        special?: string;
                        die?: string;
                        diceNumber?: string;
                        dieV?: string;
                        diceNumberV?: string;
                        range?: string;
                        rangeMax?: string;
                        properties: (string)[];
                      } | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                }) | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["skills"]["anyOf"]["2"])[];
            })[];
          bonuses?: {
            HPBonus?: {
              name?: string;
              value: string;
            };
            ACBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spells?: {
            hasSlots?: boolean;
            ability?: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["ability"];
            groups?: ({
                tag: string;
                levelMin?: string;
                timesDay?: string;
                timesDayMax?: string;
                spells: (components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"]["skills"]["anyOf"]["2"];
              })[];
          };
          enableGenerator?: boolean;
        };
        /** @enum {string} */
        age: "medieval" | "fantasy" | "renaissance" | "modern" | "future" | "space" | "other";
        description: string;
        game: number;
      };
      getBackgroundListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
          })[];
      };
      getBackgroundResponseSchema: {
        object: components["schemas"]["backgroundSchemas"]["createBackgroundSchema"]["object"];
        id: components["schemas"]["backgroundSchemas"]["getBackgroundListResponseSchema"]["list"]["items"]["id"];
      };
    };
    classSchemas: {
      updateClassSchema: {
        object: {
          name: string;
          enableGenerator?: boolean;
          armor?: ({
            AC: string;
            name: string;
            isAutomaticCalcDisabled?: boolean;
            cost?: string;
            /** @enum {string} */
            type?: "light" | "medium" | "heavy";
            maxDex?: string;
            minStr?: string;
            weight?: string;
            stealthDis?: boolean;
          }) | ({
            choice: {
              /** @enum {string} */
              type: "random";
              number?: number;
              /** @enum {string} */
              resultType: "object" | "nameId";
              /** @enum {string} */
              source: "objects" | "languages" | "skills";
              objectType?: number;
              filters?: ({
                  keyName: string;
                  keyValues: (string)[];
                })[];
              chosenAlready?: ({
                  id?: number;
                  value: string;
                  levelMin?: string;
                })[];
            };
          });
          subtypes?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          savingThrows?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          skills?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"] | {
            choice: {
              /** @enum {string} */
              type: "list";
              number: number;
              list: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
              isRepeatable?: boolean;
            };
          };
          resistances?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          immunities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          vulnerabilities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          conditionImmunities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          isBlind?: boolean;
          canSpeak?: boolean;
          telepathy?: string;
          languages?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: ({
              tag: string;
              /** @enum {string} */
              actionType?: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
              subType?: string;
              source?: string;
              tags?: (string)[];
              priority?: number;
              variants: (({
                  name: string;
                  description: string;
                  type: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["actions"]["items"]["actionType"];
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability?: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  values?: ({
                      name: string;
                      type?: string;
                      expression: string;
                    } | {
                      name: string;
                      type?: string;
                      expression?: string;
                      dice: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type?: string;
                      incrProgression: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        reach?: string;
                        targets?: string;
                        name?: string;
                        cost?: string;
                        weight?: string;
                        damageType?: string;
                        special?: string;
                        die?: string;
                        diceNumber?: string;
                        dieV?: string;
                        diceNumberV?: string;
                        range?: string;
                        rangeMax?: string;
                        properties: (string)[];
                      } | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                }) | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["skills"]["anyOf"]["2"])[];
            })[];
          bonuses?: {
            HPBonus?: {
              name?: string;
              value: string;
            };
            ACBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spells?: {
            hasSlots?: boolean;
            ability?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["ability"];
            groups?: ({
                tag: string;
                levelMin?: string;
                timesDay?: string;
                timesDayMax?: string;
                spells: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"]["choice"]["chosenAlready"]["items"])[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["skills"]["anyOf"]["2"];
              })[];
          };
          image?: {
            imgdir: string;
            lastedited: number;
          };
          imageBackground?: string;
          searchTags?: (string)[];
          environments?: (string)[];
          backstory?: {
            [key: string]: unknown;
          };
        };
        game: number;
      };
      createClassSchema: {
        game: components["schemas"]["classSchemas"]["updateClassSchema"]["game"];
        object: components["schemas"]["classSchemas"]["updateClassSchema"]["object"];
      };
      getClassWithVariantsListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
            other_objects: ({
                id: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["id"];
                name: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["name"];
                userid: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["userid"];
              })[];
          })[];
      };
      getClassListResponseSchema: {
        list: ({
            id: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["id"];
            userid: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["userid"];
            name: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["name"];
          })[];
      };
      getClassResponseSchema: {
        object: components["schemas"]["classSchemas"]["updateClassSchema"]["object"];
        id: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["id"];
      };
    };
    npcSchemas: {
      createRandomNpcInputSchema: {
        /** @enum {string} */
        levelType?: "random" | "randomPeasantsMostly";
        /** @enum {string} */
        classType?: "none" | "randomSometimes" | "randomAlways" | "specific";
        /** @enum {string} */
        backgroundType?: "none" | "random" | "specific";
        classId?: number;
        classvariantId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        backgroundId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        primaryRaceId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        secondaryRaceId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        primaryRacevariantId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        secondaryRacevariantId?: components["schemas"]["npcSchemas"]["createRandomNpcInputSchema"]["classId"];
        primaryRacePercentage?: number;
        secondaryRacePercentage?: number;
      };
      createRandomNpcResponseSchema: {
        npc: {
          character: {
            name: string;
            prename?: string;
            surname?: string;
            generic?: boolean;
            /** @enum {string} */
            pronouns?: "male" | "female" | "neutral" | "thing";
            race?: {
              name: string;
              enableGenerator?: boolean;
              ageAdult?: string;
              ageMax?: string;
              heightMin?: number;
              heightMax?: number;
              nameType?: (string)[];
              addSurname?: number;
              pronouns?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["pronouns"];
              size?: string;
              type?: string;
              subtypes?: ({
                  id?: number;
                  value: string;
                  levelMin?: string;
                })[];
              isSwarm?: boolean;
              swarmSize?: string;
              alignmentModifiers?: [[number, number, number], [number, number, number]];
              armor?: ({
                AC: string;
                name: string;
                isAutomaticCalcDisabled?: boolean;
                cost?: string;
                /** @enum {string} */
                type?: "light" | "medium" | "heavy";
                maxDex?: string;
                minStr?: string;
                weight?: string;
                stealthDis?: boolean;
              }) | ({
                choice: {
                  /** @enum {string} */
                  type: "random";
                  number?: number;
                  /** @enum {string} */
                  resultType: "object" | "nameId";
                  /** @enum {string} */
                  source: "objects" | "languages" | "skills";
                  objectType?: number;
                  filters?: ({
                      keyName: string;
                      keyValues: (string)[];
                    })[];
                  chosenAlready?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
                };
              });
              HD?: number;
              abilityScoresLimit?: number;
              speeds?: {
                base?: string;
                burrow?: string;
                climb?: string;
                fly?: string;
                hover?: string;
                swim?: string;
              };
              savingThrows?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
              skills?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"]["anyOf"]["1"] | {
                choice: {
                  /** @enum {string} */
                  type: "list";
                  number: number;
                  list: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
                  isRepeatable?: boolean;
                };
              };
              resistances?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
              immunities?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
              vulnerabilities?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
              conditionImmunities?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[];
              senses?: {
                blindsight?: string;
                darkvision?: string;
                tremorsense?: string;
                truesight?: string;
              };
              isBlind?: boolean;
              canSpeak?: boolean;
              telepathy?: string;
              languages?: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"]["anyOf"]["1"] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"]["anyOf"]["2"];
              actions?: ({
                  tag: string;
                  /** @enum {string} */
                  actionType?: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
                  subType?: string;
                  source?: string;
                  tags?: (string)[];
                  priority?: number;
                  variants: (({
                      name: string;
                      description: string;
                      type: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"]["items"]["actionType"];
                      levelMin?: number;
                      levelMax?: number;
                      /** @enum {string} */
                      ability?: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                      charges?: string;
                      recharge?: string;
                      cost?: string;
                      values?: ({
                          name: string;
                          type?: string;
                          expression: string;
                        } | {
                          name: string;
                          type?: string;
                          expression?: string;
                          dice: {
                            die: string;
                            diceNumber: string;
                            diceIncrement: string;
                            levelMin: string;
                            levelMax: string;
                            levelInterval: string;
                          };
                        } | {
                          name: string;
                          type?: string;
                          incrProgression: {
                            levelInterval: string;
                            levelIncrement: string;
                            levelMin: string;
                            base: string;
                            increment: string;
                          };
                        })[];
                      attacks?: ({
                          name: string;
                          replaceName?: boolean;
                          attributes: {
                            reach?: string;
                            targets?: string;
                            name?: string;
                            cost?: string;
                            weight?: string;
                            damageType?: string;
                            special?: string;
                            die?: string;
                            diceNumber?: string;
                            dieV?: string;
                            diceNumberV?: string;
                            range?: string;
                            rangeMax?: string;
                            properties: (string)[];
                          } | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"]["anyOf"]["1"];
                          enchantment?: {
                            type: string;
                            dice?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["values"]["items"]["anyOf"]["1"]["dice"];
                            expression?: string;
                          };
                        })[];
                    }) | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"]["anyOf"]["1"] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"]["anyOf"]["2"])[];
                })[];
              bonuses?: {
                HPBonus?: {
                  name?: string;
                  value: string;
                };
                ACBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                sizeBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedBaseBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedBurrowBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedClimbBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedFlyBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedHoverBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                speedSwimBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                STRBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                DEXBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                CONBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                INTBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                WISBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                CHABonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                STRSaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                DEXSaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                CONSaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                INTSaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                WISSaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                CHASaveBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                AthleticsBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                AcrobaticsBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                SleightOfHandBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                StealthBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                ArcanaBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                HistoryBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                InvestigationBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                NatureBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                ReligionBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                AnimalHandlingBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                InsightBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                MedicineBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                PerceptionBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                SurvivalBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                DeceptionBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                IntimidationBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                PerformanceBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                PersuasionBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                blindsightBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                darkvisionBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                tremorsenseBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                truesightBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                rangedAttackBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                rangedDamageBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                meleeAttackBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                meleeDamageBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                spellAttackBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                spellDamageBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                weaponAttackBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
                weaponDamageBonus?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"]["HPBonus"];
              };
              spells?: {
                hasSlots?: boolean;
                ability?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["ability"];
                groups?: ({
                    tag: string;
                    levelMin?: string;
                    timesDay?: string;
                    timesDayMax?: string;
                    spells: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"]["items"])[] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"]["anyOf"]["1"] | components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"]["anyOf"]["2"];
                  })[];
              };
              image?: {
                imgdir: string;
                lastedited: number;
              };
              imageBackground?: string;
              searchTags?: (string)[];
              environments?: (string)[];
              backstory?: {
                [key: string]: unknown;
              };
            };
            racevariant?: {
              name: string;
              pronouns?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["pronouns"];
              alignmentModifiers?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["alignmentModifiers"];
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              abilityScoresLimit?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["abilityScoresLimit"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              savingThrows?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["savingThrows"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              enableGenerator?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["enableGenerator"];
              image?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["image"];
              imageBackground?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["imageBackground"];
              searchTags?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["searchTags"];
              environments?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["environments"];
              backstory?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["backstory"];
            };
            class?: {
              name: string;
              enableGenerator?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["enableGenerator"];
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              savingThrows?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["savingThrows"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              image?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["image"];
              imageBackground?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["imageBackground"];
              searchTags?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["searchTags"];
              environments?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["environments"];
              backstory?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["backstory"];
            };
            classvariant?: {
              name: string;
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              savingThrows?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["savingThrows"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              enableGenerator?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["enableGenerator"];
              image?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["image"];
              imageBackground?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["imageBackground"];
              searchTags?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["searchTags"];
              environments?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["environments"];
              backstory?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["backstory"];
            };
            background?: {
              name: string;
              femaleName: string;
              workplace: string;
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              alignmentModifiers?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["alignmentModifiers"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              abilityScoresLimit?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["abilityScoresLimit"];
              savingThrows?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["savingThrows"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              enableGenerator?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["enableGenerator"];
            };
            template?: {
              name: string;
              pronouns?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["pronouns"];
              size?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["size"];
              type?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["type"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              isSwarm?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isSwarm"];
              swarmSize?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["swarmSize"];
              alignmentModifiers?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["alignmentModifiers"];
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              HD?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["HD"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              abilityScores?: {
                STR?: {
                  value: number;
                  isAutomaticCalcDisabled?: boolean;
                };
                DEX?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"]["STR"];
                CON?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"]["STR"];
                INT?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"]["STR"];
                WIS?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"]["STR"];
                CHA?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"]["STR"];
              };
              abilityScoresLimit?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["abilityScoresLimit"];
              savingThrows?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["savingThrows"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              image?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["image"];
              imageBackground?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["imageBackground"];
              searchTags?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["searchTags"];
              environments?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["environments"];
              backstory?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["backstory"];
            };
            user?: {
              name?: string;
              pronouns?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["pronouns"];
              size?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["size"];
              isSwarm?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isSwarm"];
              swarmSize?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["swarmSize"];
              type?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["type"];
              subtypes?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["subtypes"];
              armor?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["armor"];
              HD?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["HD"];
              abilityScores?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"];
              abilityScoresLimit?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["abilityScoresLimit"];
              speeds?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["speeds"];
              skills?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["skills"];
              resistances?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["resistances"];
              immunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["immunities"];
              vulnerabilities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["vulnerabilities"];
              conditionImmunities?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["conditionImmunities"];
              senses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["senses"];
              isBlind?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["isBlind"];
              canSpeak?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["canSpeak"];
              telepathy?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["telepathy"];
              languages?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["languages"];
              actions?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["actions"];
              bonuses?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["bonuses"];
              spells?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["spells"];
              image?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["image"];
              imageBackground?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["imageBackground"];
              searchTags?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["searchTags"];
              environments?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["environments"];
              backstory?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["backstory"];
              characterHook?: string;
              trait?: string;
              feeling?: string;
            };
            abilityScores?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["template"]["abilityScores"];
            alignmentModifiers?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["race"]["alignmentModifiers"];
            /** @enum {string} */
            alignmentEthical?: "Lawful" | "Neutral" | "Chaotic" | "Any" | "Unaligned";
            /** @enum {string} */
            alignmentMoral?: "Good" | "Neutral" | "Evil" | "Any";
            characterHook?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["user"]["characterHook"];
            trait?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["user"]["trait"];
            feeling?: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["character"]["user"]["feeling"];
            CRCalculation?: {
              x1: string;
              x2: string;
              y1: string;
              y2: string;
              /** @enum {string} */
              name: "twopoints";
            } | {
              /** @enum {string} */
              name: "npcstandard";
            } | {
              /** @enum {string} */
              name: "automatic";
              CR: number;
            };
            /** @enum {string} */
            proficiencyCalculation?: "level" | "CR";
          };
          statistics?: {
            alignment: (string)[];
            prename: string;
            name: string;
            surname: string;
            fullName: string;
            level: number;
            CR: {
              number: number;
              string: string;
            };
            XP: string;
            proficiency: number;
            size: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["statistics"]["CR"];
            abilityScores: {
              STR: number;
              DEX: number;
              CON: number;
              INT: number;
              WIS: number;
              CHA: number;
            };
            abilityModifiers: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["statistics"]["abilityScores"];
            HP: components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"]["statistics"]["CR"];
          };
          variables?: {
            LVL: number;
            CR: number;
            CRBASE: number;
            PROF: number;
            SIZE: number;
            HD: number;
            HP: number;
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
            STRVALUE: number;
            DEXVALUE: number;
            CONVALUE: number;
            INTVALUE: number;
            WISVALUE: number;
            CHAVALUE: number;
          };
          tags?: {
            size: string;
            sizegreater: string;
            sizesmaller: string;
            sizetwogreater: string;
            sizetwosmaller: string;
          };
          variations?: {
            currentCR?: number;
            currentHD?: number;
          };
        };
      };
      createFourRandomNpcsResponseSchema: {
        npcs: (components["schemas"]["npcSchemas"]["createRandomNpcResponseSchema"]["npc"])[];
      };
    };
    raceSchemas: {
      createRaceSchema: {
        game: number;
        object: {
          name: string;
          enableGenerator?: boolean;
          ageAdult?: string;
          ageMax?: string;
          heightMin?: number;
          heightMax?: number;
          nameType?: (string)[];
          addSurname?: number;
          /** @enum {string} */
          pronouns?: "male" | "female" | "neutral" | "thing";
          size?: string;
          type?: string;
          subtypes?: ({
              id?: number;
              value: string;
              levelMin?: string;
            })[];
          isSwarm?: boolean;
          swarmSize?: string;
          alignmentModifiers?: [[number, number, number], [number, number, number]];
          armor?: ({
            AC: string;
            name: string;
            isAutomaticCalcDisabled?: boolean;
            cost?: string;
            /** @enum {string} */
            type?: "light" | "medium" | "heavy";
            maxDex?: string;
            minStr?: string;
            weight?: string;
            stealthDis?: boolean;
          }) | ({
            choice: {
              /** @enum {string} */
              type: "random";
              number?: number;
              /** @enum {string} */
              resultType: "object" | "nameId";
              /** @enum {string} */
              source: "objects" | "languages" | "skills";
              objectType?: number;
              filters?: ({
                  keyName: string;
                  keyValues: (string)[];
                })[];
              chosenAlready?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
            };
          });
          HD?: number;
          abilityScoresLimit?: number;
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          savingThrows?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          skills?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["anyOf"]["1"] | {
            choice: {
              /** @enum {string} */
              type: "list";
              number: number;
              list: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
              isRepeatable?: boolean;
            };
          };
          resistances?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          immunities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          vulnerabilities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          conditionImmunities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          isBlind?: boolean;
          canSpeak?: boolean;
          telepathy?: string;
          languages?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: ({
              tag: string;
              /** @enum {string} */
              actionType?: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
              subType?: string;
              source?: string;
              tags?: (string)[];
              priority?: number;
              variants: (({
                  name: string;
                  description: string;
                  type: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["actions"]["items"]["actionType"];
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability?: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  values?: ({
                      name: string;
                      type?: string;
                      expression: string;
                    } | {
                      name: string;
                      type?: string;
                      expression?: string;
                      dice: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type?: string;
                      incrProgression: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        reach?: string;
                        targets?: string;
                        name?: string;
                        cost?: string;
                        weight?: string;
                        damageType?: string;
                        special?: string;
                        die?: string;
                        diceNumber?: string;
                        dieV?: string;
                        diceNumberV?: string;
                        range?: string;
                        rangeMax?: string;
                        properties: (string)[];
                      } | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                }) | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["skills"]["anyOf"]["2"])[];
            })[];
          bonuses?: {
            HPBonus?: {
              name?: string;
              value: string;
            };
            ACBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spells?: {
            hasSlots?: boolean;
            ability?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["actions"]["items"]["variants"]["items"]["anyOf"]["0"]["ability"];
            groups?: ({
                tag: string;
                levelMin?: string;
                timesDay?: string;
                timesDayMax?: string;
                spells: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["anyOf"]["1"] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["skills"]["anyOf"]["2"];
              })[];
          };
          image?: {
            imgdir: string;
            lastedited: number;
          };
          imageBackground?: string;
          searchTags?: (string)[];
          environments?: (string)[];
          backstory?: {
            [key: string]: unknown;
          };
        };
      };
      updateRaceSchema: {
        object: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"];
        game: components["schemas"]["raceSchemas"]["createRaceSchema"]["game"];
      };
      getRaceWithVariantsListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
            other_objects: ({
                id: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["id"];
                name: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["name"];
                userid: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["userid"];
              })[];
          })[];
      };
      getRaceListResponseSchema: {
        list: ({
            id: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["id"];
            userid: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["userid"];
            name: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["name"];
          })[];
      };
      getRaceResponseSchema: {
        object: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"];
        id: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["id"];
      };
    };
    userSchemas: {
      createUserSchema: {
        /** Format: email */
        email: string;
        username: string;
        password: string;
      };
      createUserResponseSchema: {
        email: components["schemas"]["userSchemas"]["createUserSchema"]["email"];
        username: components["schemas"]["userSchemas"]["createUserSchema"]["username"];
        id: number;
      };
      activateUserSchema: {
        token: string;
      };
      reactivateUserSchema: {
        /** Format: email */
        email: string;
      };
      loginSchema: {
        /** Format: email */
        email: string;
        password: string;
      };
      loginResponseSchema: {
        accessToken: string;
      };
      getUserResponseSchema: {
        id: number;
        email: components["schemas"]["userSchemas"]["createUserSchema"]["email"];
        username: components["schemas"]["userSchemas"]["createUserSchema"]["username"];
        level: number;
        /** Format: date-time */
        created: string;
        /** Format: date-time */
        publishsuspension: string;
        avatar: string;
      };
      updateUserSchema: {
        username: string;
        avatar: string;
      };
      resetPasswordSchema: {
        token: string;
        password: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
