/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/classes/": {
    /**
     * Returns a list of all available classes in the db. 
     * @description Returns a list of all available classes in the db. If authenticated, also returns the classes created by the user.
     */
    get: {
      parameters: {
        header: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/classes/withvariants": {
    /**
     * Returns a list of all available combinations of classes and variants in the db. 
     * @description Returns a list of all available combinations of classes and variants in the db. If authenticated, also returns the classes created by the user.
     */
    get: {
      parameters: {
        header: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/professions/": {
    /**
     * Returns a list of all available professions in the db. 
     * @description Returns a list of all available professions in the db. If authenticated, also returns the list of professions created by the user.
     */
    get: {
      parameters: {
        header: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["professionSchemas"]["getProfessionListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/": {
    /**
     * Returns a list of all available races in the db. 
     * @description Returns a list of all available races in the db. If authenticated, also returns the races created by the user.
     */
    get: {
      parameters: {
        header: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceListResponseSchema"];
          };
        };
      };
    };
  };
  "/api/races/withvariants": {
    /**
     * Returns a list of all available combinations of races and variants in the db. 
     * @description Returns a list of all available combinations of races and variants in the db. If authenticated, also returns the races created by the user.
     */
    get: {
      parameters: {
        header: {
          authorization?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    classSchemas: {
      updateClassSchema: {
        object: {
          name: string;
          armor?: (({
              AC: string;
              name: string;
              cost?: string;
              /** @enum {string} */
              type?: "light" | "medium" | "heavy";
              maxDex?: string;
              minStr?: string;
              weight?: string;
              /** @enum {string} */
              stealthDis?: "0" | "1";
            }) | ({
              choice: {
                type: string;
                field: string;
                number: number;
                result: string;
                /** @enum {string} */
                source?: "actions" | "armor" | "backgrounds" | "bases" | "damagetypes" | "languages" | "names" | "professions" | "skills" | "spells" | "traits" | "voices" | "weapons";
                filtersObject?: ({
                    keyName: string;
                    keyValues: (string)[];
                  })[];
              };
            }))[];
          subtypes?: ({
              value: string;
              levelMin?: string;
            })[];
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          savingThrows?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[];
          skills?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | {
            choice: {
              type: string;
              number: number;
              list: (string)[];
              repeatable?: boolean;
              chosenAlready?: (string)[];
            };
          };
          resistances?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[];
          immunities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[];
          vulnerabilities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[];
          conditionImmunities?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          /** @enum {string} */
          blind?: "1" | "0";
          /** @enum {string} */
          canspeak?: "1" | "0";
          telepathy?: string;
          languages?: (components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: ({
              tag: string;
              priority?: number;
              variants: ({
                  name: string;
                  /** @enum {string} */
                  type: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  description: string;
                  values?: ({
                      name: string;
                      type: string;
                      expression?: string;
                    } | {
                      name: string;
                      type: string;
                      expression?: string;
                      dice?: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type: string;
                      incrProgression?: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        die: string;
                        diceNumber: string;
                        reach: string;
                        targets: string;
                        damageType: string;
                        properties: (string)[];
                      } | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["items"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["actions"]["items"]["variants"]["items"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                })[];
            })[];
          bonuses?: {
            HPBonus?: {
              name: string;
              value: string;
            };
            ACBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spellCasting?: components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["actions"]["items"]["variants"]["items"]["ability"];
          spellSlots?: ({
              tag: string;
              levelMin: string;
              timesDay: string;
              timesDayMax: string;
              spells: ({
                  id: string;
                  name: string;
                })[] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["classSchemas"]["updateClassSchema"]["object"]["skills"]["anyOf"]["2"];
            })[];
          /** @enum {string} */
          enableGenerator?: "1" | "0";
          image: {
            imgdir: string;
            lastedited: number;
          };
          searchTags?: (string)[];
          environments?: (string)[];
          backgroundImage?: string;
          background: {
            [key: string]: unknown | undefined;
          };
        };
        game: number;
      };
      createClassSchema: {
        game: components["schemas"]["classSchemas"]["updateClassSchema"]["game"];
        object: components["schemas"]["classSchemas"]["updateClassSchema"]["object"];
      };
      getClassWithVariantsListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
            other_objects: ({
                id: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["id"];
                name: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["name"];
                userid: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["userid"];
              })[];
          })[];
      };
      getClassListResponseSchema: {
        list: ({
            id: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["id"];
            userid: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["userid"];
            name: components["schemas"]["classSchemas"]["getClassWithVariantsListResponseSchema"]["list"]["items"]["name"];
          })[];
      };
      getClassResponseSchema: {
        object: components["schemas"]["classSchemas"]["updateClassSchema"]["object"];
      };
    };
    professionSchemas: {
      createProfessionSchema: {
        object: {
          name: string;
          femaleName: string;
          workplace: string;
          armor?: (({
              AC: string;
              name: string;
              cost?: string;
              /** @enum {string} */
              type?: "light" | "medium" | "heavy";
              maxDex?: string;
              minStr?: string;
              weight?: string;
              /** @enum {string} */
              stealthDis?: "0" | "1";
            }) | ({
              choice: {
                type: string;
                field: string;
                number: number;
                result: string;
                /** @enum {string} */
                source?: "actions" | "armor" | "backgrounds" | "bases" | "damagetypes" | "languages" | "names" | "professions" | "skills" | "spells" | "traits" | "voices" | "weapons";
                filtersObject?: ({
                    keyName: string;
                    keyValues: (string)[];
                  })[];
              };
            }))[];
          subtypes?: ({
              value: string;
              levelMin?: string;
            })[];
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          savingThrows?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[];
          skills?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | {
            choice: {
              type: string;
              number: number;
              list: (string)[];
              repeatable?: boolean;
              chosenAlready?: (string)[];
            };
          };
          resistances?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[];
          immunities?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[];
          vulnerabilities?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[];
          conditionImmunities?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          /** @enum {string} */
          blind?: "1" | "0";
          /** @enum {string} */
          canspeak?: "1" | "0";
          telepathy?: string;
          languages?: (components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: (({
              tag: string;
              priority?: number;
              variants: ({
                  name: string;
                  /** @enum {string} */
                  type: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  description: string;
                  values?: ({
                      name: string;
                      type: string;
                      expression?: string;
                    } | {
                      name: string;
                      type: string;
                      expression?: string;
                      dice?: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type: string;
                      incrProgression?: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        die: string;
                        diceNumber: string;
                        reach: string;
                        targets: string;
                        damageType: string;
                        properties: (string)[];
                      } | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["armor"]["items"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["actions"]["items"]["anyOf"]["0"]["variants"]["items"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                })[];
            }) | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["armor"]["items"]["anyOf"]["1"])[];
          bonuses?: {
            HPBonus?: {
              name: string;
              value: string;
            };
            ACBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spellCasting?: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["actions"]["items"]["anyOf"]["0"]["variants"]["items"]["ability"];
          spellSlots?: ({
              tag: string;
              levelMin: string;
              timesDay: string;
              timesDayMax: string;
              spells: ({
                  id: string;
                  name: string;
                })[] | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"]["skills"]["anyOf"]["2"];
            })[];
          /** @enum {string} */
          enableGenerator?: "1" | "0";
        };
        /** @enum {string} */
        age: "medieval" | "fantasy" | "renaissance" | "modern" | "future" | "space" | "other";
        description: string;
      };
      getProfessionListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
          })[];
      };
      getProfessionResponseSchema: {
        object: components["schemas"]["professionSchemas"]["createProfessionSchema"]["object"];
      };
    };
    raceSchemas: {
      createRaceSchema: {
        game: number;
        object: {
          name: string;
          /** @enum {string} */
          gender?: "male" | "female" | "neutral" | "thing";
          size?: string;
          type?: string;
          /** @enum {string} */
          swarm?: "1" | "0";
          swarmSize?: string;
          subtypes?: ({
              value: string;
              levelMin?: string;
            })[];
          alignment?: ([[object Object], [object Object]])[];
          armor?: (({
              AC: string;
              name: string;
              cost?: string;
              /** @enum {string} */
              type?: "light" | "medium" | "heavy";
              maxDex?: string;
              minStr?: string;
              weight?: string;
              /** @enum {string} */
              stealthDis?: "0" | "1";
            }) | ({
              choice: {
                type: string;
                field: string;
                number: number;
                result: string;
                /** @enum {string} */
                source?: "actions" | "armor" | "backgrounds" | "bases" | "damagetypes" | "languages" | "names" | "professions" | "skills" | "spells" | "traits" | "voices" | "weapons";
                filtersObject?: ({
                    keyName: string;
                    keyValues: (string)[];
                  })[];
              };
            }))[];
          HD?: number;
          abilitiesLimit?: string;
          speeds?: {
            base?: string;
            burrow?: string;
            climb?: string;
            fly?: string;
            hover?: string;
            swim?: string;
          };
          savingThrows?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          skills?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | {
            choice: {
              type: string;
              number: number;
              list: (string)[];
              repeatable?: boolean;
              chosenAlready?: (string)[];
            };
          };
          resistances?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          immunities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          vulnerabilities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          conditionImmunities?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[];
          senses?: {
            blindsight?: string;
            darkvision?: string;
            tremorsense?: string;
            truesight?: string;
          };
          /** @enum {string} */
          blind?: "1" | "0";
          /** @enum {string} */
          canspeak?: "1" | "0";
          telepathy?: string;
          languages?: (components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["subtypes"]["items"])[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["skills"]["anyOf"]["2"];
          actions?: ({
              tag: string;
              priority?: number;
              variants: ({
                  name: string;
                  /** @enum {string} */
                  type: "trait" | "legendary" | "action" | "reaction" | "bonus" | "attack" | "multiattack" | "mythic" | "lair";
                  levelMin?: number;
                  levelMax?: number;
                  /** @enum {string} */
                  ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
                  charges?: string;
                  recharge?: string;
                  cost?: string;
                  description: string;
                  values?: ({
                      name: string;
                      type: string;
                      expression?: string;
                    } | {
                      name: string;
                      type: string;
                      expression?: string;
                      dice?: {
                        die: string;
                        diceNumber: string;
                        diceIncrement: string;
                        levelMin: string;
                        levelMax: string;
                        levelInterval: string;
                      };
                    } | {
                      name: string;
                      type: string;
                      incrProgression?: {
                        levelInterval: string;
                        levelIncrement: string;
                        levelMin: string;
                        base: string;
                        increment: string;
                      };
                    })[];
                  attacks?: ({
                      name: string;
                      replaceName?: boolean;
                      attributes: {
                        die: string;
                        diceNumber: string;
                        reach: string;
                        targets: string;
                        damageType: string;
                        properties: (string)[];
                      } | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["items"]["anyOf"]["1"];
                      enchantment?: {
                        type: string;
                        dice?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["actions"]["items"]["variants"]["items"]["values"]["items"]["anyOf"]["1"]["dice"];
                        expression?: string;
                      };
                    })[];
                })[];
            })[];
          bonuses?: {
            HPBonus?: {
              name: string;
              value: string;
            };
            ACBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            sizeBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedBaseBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedBurrowBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedClimbBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedFlyBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedHoverBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            speedSwimBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            STRBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DEXBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CONBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            INTBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            WISBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CHABonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            STRSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DEXSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CONSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            INTSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            WISSaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            CHASaveBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AthleticsBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AcrobaticsBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            SleightOfHandBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            StealthBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            ArcanaBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            HistoryBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            InvestigationBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            NatureBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            ReligionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            AnimalHandlingBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            InsightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            MedicineBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PerceptionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            SurvivalBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            DeceptionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            IntimidationBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PerformanceBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            PersuasionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            blindsightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            darkvisionBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            tremorsenseBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            truesightBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            rangedAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            rangedDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            meleeAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            meleeDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            spellAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            spellDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            weaponAttackBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
            weaponDamageBonus?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["bonuses"]["HPBonus"];
          };
          spellCasting?: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["actions"]["items"]["variants"]["items"]["ability"];
          spellSlots?: ({
              tag: string;
              levelMin: string;
              timesDay: string;
              timesDayMax: string;
              spells: ({
                  id: string;
                  name: string;
                })[] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["armor"]["items"]["anyOf"]["1"] | components["schemas"]["raceSchemas"]["createRaceSchema"]["object"]["skills"]["anyOf"]["2"];
            })[];
          /** @enum {string} */
          enableGenerator?: "1" | "0";
          ageAdult?: string;
          ageMax?: string;
          heightMin?: number;
          heightMax?: number;
          nameType?: (string)[];
          addSurname?: number;
          image: {
            imgdir: string;
            lastedited: number;
          };
          searchTags?: (string)[];
          environments?: (string)[];
          backgroundImage?: string;
          background: {
            [key: string]: unknown | undefined;
          };
        };
      };
      updateRaceSchema: {
        object: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"];
        game: components["schemas"]["raceSchemas"]["createRaceSchema"]["game"];
      };
      getRaceWithVariantsListResponseSchema: {
        list: ({
            id: number;
            userid: number;
            name: string;
            other_objects: ({
                id: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["id"];
                name: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["name"];
                userid: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["userid"];
              })[];
          })[];
      };
      getRaceListResponseSchema: {
        list: ({
            id: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["id"];
            userid: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["userid"];
            name: components["schemas"]["raceSchemas"]["getRaceWithVariantsListResponseSchema"]["list"]["items"]["name"];
          })[];
      };
      getRaceResponseSchema: {
        object: components["schemas"]["raceSchemas"]["createRaceSchema"]["object"];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
